5. Node.js로 웹서버 만들기
nodejs가 서버로 작동한다!!!
각각의 페이지에 해당하는 파일을 nodejs가 불러와 뿌려준다.

9강
main.js파일을 실행시켜 만든 웹페이지는 각각의 페이지 마다 동적인 파일을 가져오는 것이다.
그러나 대부분의 경우에는 같은 파일을 불러오고 뒤에 번호를 붙인다. 원리를 알기 위해서는
URL의 형식에 대해 알아보자
http://opentutorials.org:3000/main?id=HTML&page=12
통신규칙://인터넷에 접속되어있는 호스트의 주소:포트번호/접속한 컴의 경로/내가 읽고싶은 정보의 정보
웹의 포트번호는 전세계적으로 80이라 생략하면 80으로 자동으로 접속

10강. URL을 통해서 입력된 값 사용하기
쿼리 스트링 값은 request.url에 반영이 된다. ... url안의 값을 추출하는 것을 통해
우리가 원하는 값을 얻어낼 수 있다.
var url = require('url'); 메인 맨 위에 있는 것은 모듈
url이라는 변수를 통해 url모듈을 사용하겠다는
var queryData = url.parse(_url,true).query;
을 한 뒤에 queryData.id를 하면 주어진 url의 id 값을 알 수 있다.
... 이로서 쿼리스트링값에 따라 달라지는 정보를 알아낼 수 있게 되었다.

11강. 동적인 웹페이지 만들기
임시로 template에 1.html의 내용을 넣어 준 뒤
쿼리스트링에 따라 바뀌었으면 하는 부분(title, h2)에 대해 ${queryData.id}를 해준다.
이후 response.end(template)를 해주면 내가 입력해주는 쿼리스트링에 따라 웹페이지의 제목과 내용이
동적으로 바뀐다.
제일 큰 타이틀을 누르면 /로 리턴 이때 if 문을 통해 title을 Welcome으로 바꾸게 한다.
이렇게 정보를 다이나믹하게 프로그램적으로 생성할 수 있게 되었다. 이렇게 된다면 웹페이지의 갯수에 상관없이
동시에 바뀌는 폭발적인 힘을 가지고 있게 된다는 것이다. ... 제목은 동적으로 바꾸는데 성공 하였다.
그렇다면 본문은...? 본문은 파일로 저장해놓고 동적으로 원하는 파일을 불러와 뿌릴수있게 된다면...?

12강. Node.js의 파일 읽기 기능
정보시스템의 핵심적인 매커니즘 CRUD(생성 읽기 수정 삭제)
파일을 어떻게 하면 nodejs로 읽을수 있을까?
우리가 nodejs폴더 안에 fileread.js와 sample.txt파일을 만들어 놓고 node nodejs.fileread.js로
실행을 한다면 node의 실행 위치가 폴더 밖이기 때문에 sample.txt 에 접근을 할 수가 없다. 그러므로 cd 명령어를 통해
nodejs폴더 안으로 이동한 뒤 fileread를 실행하자

13강. 파일을 이용해 본문 구현
 먼저 data폴더 안에 각각의 본문만을 적은 파일을 생성한다. 그리고 나서 main.js에서 본문의 내용을 쿼리값에 따라 파일을 잘 불러와야 한다.
 fs.readFile(`data/${queryData.id}`,'utf8',function(err, description)
 을 이용해 파일을 읽는다. description에 내가 출력 할 본문이 담겨져 있기 때문에 원래 본문이 있던 부분을
 ${description}으로 바꾸어 준다. 또한 파일을 읽고 출력해야하므로 fs.readfile안으로 코드들을 옮겨준다.

 14강. JavaScript-Boolean
 Boolean데이터 타입, Comparison 비교연산자, conditional 조건문
 Boolean데이터 타입 - 단 두개의 데이터로 이루어져 있음 true, false

 15강. JavaScript-비교연산자
 +-*/% 같은건 이항 연산자라고 불림 -> 왼쪽과 오른쪽의 값을 통해 하나의 값으로 표현
 == : 좌항과 우항의 값이 같으면 true, 다르면 false
 >,< 이런것도... 그리고 ==를 쓸때 이유가 없다면 그냥 === 이렇게 3개로 쓰자

 16강. JavaScript-제어문
 node 명령어로 일일히 해도 되지만 파일을 만들어 시간의 순서대로 한다면... 문제를 훨씬 효율적으로 해결가능
 그러나 경우와 조건에 따라 다르게 실행하고 싶다면.. 조건문을 사용해도 되지만 두개의 프로그램으로 나누어 실행해도 된다.
 두개의 프로그램이 있다는 것을 인지하고 상황에 따라 각각의 프로그램을 실행할 수 있다. 그런데 이때 중복되는 코드에 대해
 기능개선이나 버그수정을 하려고 한다면 프로그램의 갯수만큼 수정을 해야하게 된다. 이러한 아비규환속에서 우리를 구원해주는 것이
 제어문 이다. 제어문을 이용하면 시간의 순서에 따라 실행되는 프로그램을 제어문을 이용해 제어 가능하다.

17강. JavaScript-조건문
if문을 사용하고 중괄호 안의 조건이 true라면 대괄호 안의 코드가 실행된다. // 기본적인 if-else 문과 동일

18강. NodeJS-콘솔에서의 입력값
콘솔에서 우리가 명령을 실행할 떄 입력값을 주는 방법 (실용성은 없을 듯)
var args = process.argv; 이렇게 받을 수 있다. args는 배열로서 입력받은 문자열을
띄어쓰기를 기준으로 저장한다.

19-1강. Not found 구현
id값이 없는 쿼리스트링으로 접근한다면...
먼저 사용자가 루트를 통해 접근했는가? 에 대..
url.parse(_url,true) 주어진 url을 분석해서 알려줌
url.parse(_url,true).pathname 을 해주면 쿼리스트링을 제외한 path만을 보여줌
path가 루트를 통해 들어왔다면 기존의 방식으로 실행
그러나 다른 방식으로 들어왔다면 에러 페이지 보여주기
response.writeHead(404); -> 이건 정보가 잘 전달이 되었는지 기계끼리 주고받는 코드 잘 안갔으면 404
response.end('Not Found'); ->에러가 났기때문에 Not found 보여줌

19-2강. 홈페이지 구현
아직 홈에 대한 처리가 되어있지 않다. 홈에 갔을때, 페이지에 갔을때 둘다 pathname은 /로 동일하다.
구분 기분은 queryData.id를 통해 구분해주자 홈페이지에 들어간다면 queryData.id는 정의되지 않은 데이터 일 것이다.
정의되지 않음 === undefinded 정의 되지 않음 일때 홈페이지이므로 title과 description을 따로 설정해주고 표시해준다.

20강. JavaScript-반복문
copy를 통해 반복할수도 있지만 반복문을 통해 쉽게 해결할 수 있다.
while : 중괄호 안의 조건이 옳을때 대괄호 안의 코드를 실행한다.

21강. JavaScript-배열
우리가 기본적으로 사용하는 배열과 거의 동일하다. 0번째로부터 시작하고 length는 진짜 개수
push 등등 앞에 추가 뒤에 빼기 같은 함수 사용 가능하다.

22강. JavaScript-배열과 반복
배열과 반복문을 결합하면 유용하게 사용가능

23강. 파일목록 알아내기
데이터를 추가하며 그때마다 글 목록을 추가해 줘야함.. 이걸 어떻게 기계한테 시킬까?
데이터 파일에 파일이 수정,추가,삭제 되었을때 그걸 어떻게 노드에 알려줄까?
fs.readdir 을 사용하자. ..
파일의 위치를 기준으로 파일 위치 지정하면 긁어옴

24강. 글 목록 출력하기
